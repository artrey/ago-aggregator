// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TicketsServiceClient is the client API for TicketsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TicketsServiceClient interface {
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (TicketsService_SearchClient, error)
}

type ticketsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTicketsServiceClient(cc grpc.ClientConnInterface) TicketsServiceClient {
	return &ticketsServiceClient{cc}
}

func (c *ticketsServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (TicketsService_SearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &TicketsService_ServiceDesc.Streams[0], "/tickets.v1.TicketsService/Search", opts...)
	if err != nil {
		return nil, err
	}
	x := &ticketsServiceSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TicketsService_SearchClient interface {
	Recv() (*SearchResponse, error)
	grpc.ClientStream
}

type ticketsServiceSearchClient struct {
	grpc.ClientStream
}

func (x *ticketsServiceSearchClient) Recv() (*SearchResponse, error) {
	m := new(SearchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TicketsServiceServer is the server API for TicketsService service.
// All implementations must embed UnimplementedTicketsServiceServer
// for forward compatibility
type TicketsServiceServer interface {
	Search(*SearchRequest, TicketsService_SearchServer) error
	mustEmbedUnimplementedTicketsServiceServer()
}

// UnimplementedTicketsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTicketsServiceServer struct {
}

func (UnimplementedTicketsServiceServer) Search(*SearchRequest, TicketsService_SearchServer) error {
	return status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedTicketsServiceServer) mustEmbedUnimplementedTicketsServiceServer() {}

// UnsafeTicketsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TicketsServiceServer will
// result in compilation errors.
type UnsafeTicketsServiceServer interface {
	mustEmbedUnimplementedTicketsServiceServer()
}

func RegisterTicketsServiceServer(s grpc.ServiceRegistrar, srv TicketsServiceServer) {
	s.RegisterService(&TicketsService_ServiceDesc, srv)
}

func _TicketsService_Search_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TicketsServiceServer).Search(m, &ticketsServiceSearchServer{stream})
}

type TicketsService_SearchServer interface {
	Send(*SearchResponse) error
	grpc.ServerStream
}

type ticketsServiceSearchServer struct {
	grpc.ServerStream
}

func (x *ticketsServiceSearchServer) Send(m *SearchResponse) error {
	return x.ServerStream.SendMsg(m)
}

// TicketsService_ServiceDesc is the grpc.ServiceDesc for TicketsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TicketsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tickets.v1.TicketsService",
	HandlerType: (*TicketsServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Search",
			Handler:       _TicketsService_Search_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/proto/v1/tickets.proto",
}
